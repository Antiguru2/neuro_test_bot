import os
import json
import aiofiles

from datetime import (
    datetime, 
    timezone,
    timedelta,
)

from aiogram import (
    Router, 
    F, 
    types, 
)
from aiogram.fsm.context import (
    FSMContext,
)
from aiogram.filters import (
    Command, 
)

from main import (
    utils as main_utils,
    keyboards as main_keyboards,
)
from bot import (
    bot,
    MainStatesGroup,
)

# üëãüìñüìùüõ∞Ô∏èüõ∏üë®‚Äçüî¨üë©‚Äçüè´

main_router = Router(name='main')


@main_router.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    '''
        –í—Ö–æ–¥ –≤ –±–æ—Ç–∞
        –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Ç–æ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        –ò–Ω–∞—á–µ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
    '''
    await state.clear()

    from_user_id = message.from_user.id
    user_is_allowed = await main_utils.user_is_allowed(message, from_user_id)
    if user_is_allowed:
        user_data = {}

        if not os.path.exists('profiles'):
            os.mkdir('profiles')

        file_path = f'profiles/{from_user_id}.js'
        
        if os.path.exists(file_path):
            async with aiofiles.open(file_path, mode='r') as f:
                user_data = json.loads(await f.read())
                await state.update_data(user_data=user_data)

        else:
            start_of_use = int(datetime.now().timestamp())
            async with aiofiles.open(file_path, mode='w') as f:
                await f.write(json.dumps({'start_of_use': start_of_use}))

        training_status = user_data.get('training_status', False)

        text = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>–ù–µ–π—Ä–æ-—Ç–µ—Å—Ç –±–æ—Ç–∞</b>\n\n–û–Ω –ø—Ä–µ–¥–Ω–æ–∑–Ω–∞—á–µ–Ω –¥–ª—è –æ–±—É—á–µ–Ω–∏—è üë©‚Äçüè´ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞–Ω–∏–π üìù."

        if  training_status == "finished":
            text += "\n\n–í—ã —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏ –æ–±—É—á–µ–Ω–∏–µ –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –Ω–µ–π—Ä–æ-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É üë®‚Äçüî¨"
        else:
            text += "\n\n–ü–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è –≤–∞–º –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–µ–π—Ä–æ-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç üë®‚Äçüî¨, –æ–Ω –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –≤ –≤–æ–ø—Ä–æ—Å–∞—Ö –ø–æ —Ç–µ–º–µ."

        new_message = await message.answer(
            text,
            parse_mode='html',
            reply_markup=main_keyboards.get_menu_keyboard(training_status)    
        )

        await main_utils.append_value_state_data(state, 'previous_messages', [new_message.message_id])

        await bot.set_my_commands(
            commands=[types.BotCommand(command='/menu', description='–ú–µ–Ω—é')],
            scope=types.BotCommandScopeAllPrivateChats(),
            # scope=types.BotCommandScopeDefault(),
        )
        # await main_utils.delete_previous_messages(bot, message, state)
        # await main_utils.try_message_delete(message)      


@main_router.message(Command("menu"))
async def start(message: types.Message, state: FSMContext):
    '''
        –í—ã—Ö–æ–¥–∏—Ç –≤ –º–µ–Ω—é
    '''
    await main_utils.try_message_delete(message)
    await main_utils.delete_previous_messages(bot, message, state)
    await state.clear()

    new_message = await message.answer(
        "üöß –ú–µ–Ω—é –ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start",
        parse_mode='html',
    )

    await main_utils.append_value_state_data(state, 'previous_messages', [new_message.message_id])


@main_router.callback_query(
    F.data == 'studying',
)
async def studying(callback: types.CallbackQuery, state: FSMContext):
    '''
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—É—á–µ–Ω–∏–µ
    '''
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞
    from_user_id = callback.message.chat.id
    user_is_allowed = await main_utils.user_is_allowed(callback.message, from_user_id)
  
    if user_is_allowed:
        await state.set_state(MainStatesGroup.studying)   

        last_stage = await main_utils.get_last_stage(state)

        stage_line_numbers = main_utils.get_stage_line_numbers_list()

        stage_content = main_utils.get_stage_content_by_number(last_stage)
        # print('stage_content', stage_content)  
        await main_utils.delete_previous_messages(bot, callback.message, state)

        await callback.answer(
            text=str(
                'üîé –ò–∑—É—á–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª.'
                '\nüìù –ó–∞ —Ç–µ–º –ø—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ'
            ),
            show_alert=True,
        )

        message_data = {
            'text': stage_content,    
            'chat_id': from_user_id,
            'parse_mode': 'html',
            'reply_markup': main_keyboards.get_studying_keyboard(),
        }  
        message, is_sent = await main_utils.edit_message_or_send(bot, state, message_data)

        if is_sent:
            await main_utils.append_value_state_data(state, 'previous_messages', [message.message_id])  


@main_router.callback_query(
    F.data == 'go_to_testing',
)
async def studying(callback: types.CallbackQuery, state: FSMContext):
    '''
        –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    '''
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞
    state_data = await state.get_data()
    from_user_id = callback.message.chat.id
    user_is_allowed = await main_utils.user_is_allowed(callback.message, from_user_id)
  
    if user_is_allowed:
        await state.set_state(MainStatesGroup.testing)   

        last_stage = await main_utils.get_last_stage(state)        
        last_question_num = state_data.get('last_question_num', 0)

        question_data = await main_utils.get_question_data(last_stage, last_question_num) 

        # print('question_data', question_data)




        stage_line_numbers = main_utils.get_stage_line_numbers_list()

        stage_content = main_utils.get_stage_content_by_number(last_stage)
        # print('stage_content', stage_content)  
        await main_utils.delete_previous_messages(bot, callback.message, state)

        await callback.answer(
            text=str(
                'üîé –ò–∑—É—á–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª.'
                'üìù –ó–∞ —Ç–µ–º –ø—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ'
            ),
            show_alert=True,
        )

        message_data = {
            'text': stage_content,    
            'chat_id': from_user_id,
            'parse_mode': 'html',
            'reply_markup': main_keyboards.get_studying_keyboard(),
        }  
        message, is_sent = await main_utils.edit_message_or_send(bot, state, message_data)

        if is_sent:
            await main_utils.append_value_state_data(state, 'previous_messages', [message.message_id]) 
