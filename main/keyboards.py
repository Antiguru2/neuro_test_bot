import os
import asyncio

from dotenv import load_dotenv
from typing import Optional

from aiogram import (
    Bot,
    types, 
)
from aiogram.utils.keyboard import (
    InlineKeyboardBuilder,
)

load_dotenv()

WEB_APP_PATH = os.getenv('WEB_APP_PATH') 


async def send_then_delete(
    bot: Bot,
    message: types.Message, 
    text: str = '–í—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', 
    seconds=30,
):
    new_message = await bot.send_message(message.chat.id, text, parse_mode="HTML")
    await asyncio.sleep(seconds)  
    await new_message.delete()


def get_button_exit(title: str = 'üîô  –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é'):
    '''
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–Ω–æ–ø–∫—É –≤—ã—Ö–æ–¥–∞ –≤ –º–µ–Ω—é
    '''
    button_exit = types.InlineKeyboardButton(
        text=title, callback_data=f"exit"
    )
    return button_exit


def get_button_back():
    '''
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
    '''
    button_back = types.InlineKeyboardButton(
        text="–ù–∞–∑–∞–¥", callback_data=f"back"
    )
    return button_back


def get_web_app_button(url: str ='https://basestore.site/', text: str = 'web_app'):
    '''
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–Ω–æ–ø–∫—É web_app
    '''
    button = types.InlineKeyboardButton(
        text=text, 
        web_app=types.WebAppInfo(
            url=url,
        )
    )
    return button


def get_web_app_keyboard(url: str ='https://basestore.site/', text: str = 'web_app'):
    '''
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É web_app
    '''
    builder = InlineKeyboardBuilder()
    builder.row(get_web_app_button(url, text))
    return builder.as_markup()


def get_menu_keyboard(course_slug, stage_slug, training_status):
    '''
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    '''
    builder = InlineKeyboardBuilder()

    builder.row(types.InlineKeyboardButton(
            text='–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é üìù', callback_data=f"go_to_testing",
    ))
    if training_status != 'finished':

        url = f"{WEB_APP_PATH}{course_slug}/{stage_slug}/"
        text = "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ üë©‚Äçüè´"
        if not training_status:
            text = "–ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –æ–±—É—á–µ–Ω–∏—é üë©‚Äçüè´"

        builder.row(get_web_app_button(url, text))

    return builder.as_markup()


def get_studying_keyboard():
    '''
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    '''
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(
            text='–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é üìù', callback_data=f"go_to_testing",
    ))
    return builder.as_markup()


def get_question_keyboard(answers: list) -> Optional[types.InlineKeyboardMarkup]:
    '''
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    '''
    builder = InlineKeyboardBuilder()
    if answers:
        builder.row(
            types.InlineKeyboardButton(
                text=answers[0], callback_data=f"answer__0",
            ), types.InlineKeyboardButton(
                text=answers[1], callback_data=f"answer__1",
            )
        )
        builder.row(
            types.InlineKeyboardButton(
                text=answers[2], callback_data=f"answer__2",
            ), types.InlineKeyboardButton(
                text=answers[3], callback_data=f"answer__3",
            )
        )        
    return builder.as_markup()

REGISTRATION_DATA = [
    {   
        "slug": "departament",
        "text": "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –æ—Ç–¥–µ–ª üè¢",
        "buttons": [
            {
                "name": "–ë—É–≥–∞—Ä—Ç–µ—Ä–∏—è üßÆ",
                "slug": "accounting",
            },{
                "name": "–ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç üìä",
                "slug": "management",
            },
        ]
    },
    {   
        "slug": "password",
        "text": "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å üîë",
        "buttons": []
    },
    {   
        "slug": "full_name",
        "text": "–í–≤–µ–¥–∏—Ç–µ –§–ò–û üìá",
        "buttons": []
    },
]

PASSWORD_DATA = [
    { 
        "departament": "accounting",
        "passwords": [
            "1111"
        ]
    },
    { 
        "departament": "management",
        "passwords": [
            "2222"
        ]
    },
]



def get_registration_keyboard(registration_stage: int) -> Optional[types.InlineKeyboardMarkup]:
    '''
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    '''
    builder = InlineKeyboardBuilder()
    reg_stage_data = REGISTRATION_DATA[registration_stage]
    # print("reg_stage_data", reg_stage_data)

    buttons = reg_stage_data.get('buttons')
    if buttons:
        for button in buttons:
            text = button.get('name')
            slug = button.get('slug')

            builder.row(
                types.InlineKeyboardButton(
                    text=text, callback_data=slug,
                ),
            )  
        return builder.as_markup()
    else:
        return None